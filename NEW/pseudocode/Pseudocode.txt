# === INITIALIZATION ===
IMPORT required libraries:
    - OS, CV2, datetime, json, threading, numpy, io, base64, time, uuid, smtplib, schedule, collections
    - ultralytics.YOLO for object detection
    - Flask for web interface
    - werkzeug for security
    - fpdf for PDF generation
    - matplotlib for visualization
    - twilio for SMS alerts

CONFIGURE Twilio and Email settings with API credentials

INITIALIZE Flask application with secret key

SETUP user credentials with hashed passwords

LOAD YOLO object detection model ("best.pt")

CREATE directory for activity logs if it doesn't exist

INITIALIZE data structures:
    - last_logged_time dictionary
    - activity_log list
    - activity_counts dictionary for alerts
    - lock for thread-safe operations

# === CORE FUNCTIONS ===
FUNCTION get_log_file_path(date):
    RETURN path to JSON log file for given date (or today if not specified)

FUNCTION send_sms_alert(activity):
    IF activity is not "working":
        INCREMENT count for this activity
        IF count exceeds threshold AND cooldown period has passed:
            SEND WhatsApp alert via Twilio
            RESET count and update last alert time

FUNCTION generate_raw_feed():
    OPEN video file ("3.mp4")
    WHILE video has frames:
        READ frame
        RESIZE frame
        CONVERT to JPEG
        YIELD frame as HTTP multipart response

FUNCTION detect_objects_from_video():
    OPEN video file ("3.mp4")
    WHILE video has frames:
        READ frame (process every 3rd frame)
        RESIZE frame
        RUN object detection with YOLO model
        FOR each detected object:
            DRAW bounding box and label
            IF object hasn't been logged recently:
                RECORD activity with timestamp and ID
                CALL send_sms_alert if needed
        SAVE frame with detections
        IF activities detected:
            CALL save_activity_log
        DISPLAY frame
        BREAK if 'q' pressed
    RELEASE video resources

FUNCTION save_activity_log(detected_activities):
    LOCK log file
    READ existing log data
    APPEND new activities
    WRITE back to log file
    RELEASE lock

FUNCTION calculate_time_spent(activities):
    CALCULATE duration between consecutive activities
    SUM time spent per activity type
    RETURN dictionary of activity durations

# === WEB INTERFACE ROUTES ===
ROUTE /login (GET/POST):
    IF POST request:
        VERIFY username/password
        IF valid:
            SET session cookie
            REDIRECT to main page
        ELSE:
            SHOW error
    ELSE:
        RENDER login page

ROUTE /logout:
    CLEAR session
    REDIRECT to login

ROUTE / (main page):
    REQUIRE login
    GET list of available log dates
    RENDER index page with dropdown

ROUTE /video_feed:
    REQUIRE login
    STREAM raw video feed

ROUTE /get_logs_by_date (POST):
    REQUIRE login
    READ log file for requested date
    RETURN JSON data

ROUTE /clear_activity_log (POST):
    REQUIRE login
    DELETE today's log file
    RESET activity_log
    RETURN success message

ROUTE /activity_graph (GET/POST):
    REQUIRE login
    IF POST request:
        IF weekly_report requested:
            GENERATE and email 7-day report
        ELSE:
            READ log data for selected date
            GENERATE bar chart of activity counts
            CONVERT chart to base64 for HTML display
    RENDER graph page with form

ROUTE /download_pdf (POST):
    REQUIRE login
    READ log data for selected date
    GENERATE PDF with activity graph
    RETURN as downloadable file

ROUTE /generate_report (POST):
    REQUIRE login
    GET report type (weekly/monthly)
    CALCULATE date range
    GENERATE report data
    CREATE PDF report
    IF email requested:
        SEND email with PDF attachment
    ELSE:
        RETURN downloadable PDF

# === REPORT GENERATION ===
FUNCTION generate_report_data(start_date, end_date):
    INITIALIZE report data structure
    FOR each day in date range:
        IF log file exists:
            READ activities
            CALCULATE time spent per activity
            CATEGORIZE as working/mobile/other
            SUM to report totals
    RETURN report data

FUNCTION create_pdf_report(report_data):
    INITIALIZE PDF document
    ADD title with date range
    ADD summary section with:
        - Total working hours
        - Mobile usage
        - Other activities
    RETURN PDF object

FUNCTION send_email_with_report(pdf, report_data):
    CREATE email message with subject/body
    ATTACH PDF report
    CONNECT to SMTP server
    SEND email
    CLOSE connection

FUNCTION send_7_days_report_via_email():
    CALCULATE date range (last 7 days)
    GENERATE report data
    CREATE pie chart of working time distribution
    GENERATE PDF with chart and summary
    SEND email with PDF attachment

# === SCHEDULED TASKS ===
FUNCTION schedule_reports():
    SCHEDULE weekly report every Monday at 9 AM
    SCHEDULE monthly report on 1st at 9 AM
    RUN pending scheduled tasks every minute

# === MAIN EXECUTION ===
START detection thread (detect_objects_from_video)
START report scheduling thread (schedule_reports)

RUN Flask application on 0.0.0.0:8080